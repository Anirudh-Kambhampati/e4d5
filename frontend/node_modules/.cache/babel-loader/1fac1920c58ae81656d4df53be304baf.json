{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  selectedNode: {},\n  selectedUser: {},\n  isLoading: false,\n  folderTree: {}\n};\nconst folderTreeSlice = createSlice({\n  name: 'folderTree',\n  initialState,\n  reducers: {\n    setSelectedNode: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.selectedNode = payload;\n    },\n    setSelectedUser: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.selectedUser = payload;\n    },\n    setIsLoading: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.isLoading = payload;\n    },\n    setFolderTree: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.folderTree = payload;\n    }\n  }\n});\nexport const {\n  setSelectedNode,\n  setSelectedUser,\n  setIsLoading,\n  setFolderTree\n} = folderTreeSlice.actions;\nexport const getSelectedNode = state => state.folderTree.selectedNode;\nexport const getSelectedUser = state => state.folderTree.selectedUser;\nexport const getIsLoading = state => state.folderTree.isLoading;\nexport const getFolderTree = state => state.folderTree.folderTree;\nexport default folderTreeSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","selectedNode","selectedUser","isLoading","folderTree","folderTreeSlice","name","reducers","setSelectedNode","state","payload","setSelectedUser","setIsLoading","setFolderTree","actions","getSelectedNode","getSelectedUser","getIsLoading","getFolderTree","reducer"],"sources":["/Users/akwg7/Documents/react/RISE1/rise-clean/frontend/src/redux/folderTree/folderTreeSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  selectedNode: {},\n  selectedUser: {},\n  isLoading: false,\n  folderTree: {},\n};\n\nconst folderTreeSlice = createSlice({\n  name: 'folderTree',\n  initialState,\n  reducers: {\n    setSelectedNode: (state, { payload }) => {\n      state.selectedNode = payload;\n    },\n    setSelectedUser: (state, { payload }) => {\n      state.selectedUser = payload;\n    },\n    setIsLoading: (state, { payload }) => {\n      state.isLoading = payload;\n    },\n    setFolderTree: (state, { payload }) => {\n      state.folderTree = payload;\n    },\n  },\n});\n\nexport const { setSelectedNode, setSelectedUser, setIsLoading, setFolderTree } =\n  folderTreeSlice.actions;\n\nexport const getSelectedNode = (state) => state.folderTree.selectedNode;\nexport const getSelectedUser = (state) => state.folderTree.selectedUser;\nexport const getIsLoading = (state) => state.folderTree.isLoading;\nexport const getFolderTree = (state) => state.folderTree.folderTree;\nexport default folderTreeSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,YAAY,EAAE,CAAC,CAAC;EAChBC,YAAY,EAAE,CAAC,CAAC;EAChBC,SAAS,EAAE,KAAK;EAChBC,UAAU,EAAE,CAAC;AACf,CAAC;AAED,MAAMC,eAAe,GAAGN,WAAW,CAAC;EAClCO,IAAI,EAAE,YAAY;EAClBN,YAAY;EACZO,QAAQ,EAAE;IACRC,eAAe,EAAE,CAACC,KAAK,WAAkB;MAAA,IAAhB;QAAEC;MAAQ,CAAC;MAClCD,KAAK,CAACR,YAAY,GAAGS,OAAO;IAC9B,CAAC;IACDC,eAAe,EAAE,CAACF,KAAK,YAAkB;MAAA,IAAhB;QAAEC;MAAQ,CAAC;MAClCD,KAAK,CAACP,YAAY,GAAGQ,OAAO;IAC9B,CAAC;IACDE,YAAY,EAAE,CAACH,KAAK,YAAkB;MAAA,IAAhB;QAAEC;MAAQ,CAAC;MAC/BD,KAAK,CAACN,SAAS,GAAGO,OAAO;IAC3B,CAAC;IACDG,aAAa,EAAE,CAACJ,KAAK,YAAkB;MAAA,IAAhB;QAAEC;MAAQ,CAAC;MAChCD,KAAK,CAACL,UAAU,GAAGM,OAAO;IAC5B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEF,eAAe;EAAEG,eAAe;EAAEC,YAAY;EAAEC;AAAc,CAAC,GAC5ER,eAAe,CAACS,OAAO;AAEzB,OAAO,MAAMC,eAAe,GAAIN,KAAK,IAAKA,KAAK,CAACL,UAAU,CAACH,YAAY;AACvE,OAAO,MAAMe,eAAe,GAAIP,KAAK,IAAKA,KAAK,CAACL,UAAU,CAACF,YAAY;AACvE,OAAO,MAAMe,YAAY,GAAIR,KAAK,IAAKA,KAAK,CAACL,UAAU,CAACD,SAAS;AACjE,OAAO,MAAMe,aAAa,GAAIT,KAAK,IAAKA,KAAK,CAACL,UAAU,CAACA,UAAU;AACnE,eAAeC,eAAe,CAACc,OAAO"},"metadata":{},"sourceType":"module"}