{"ast":null,"code":"import getPathToString from './getPathToString.js';\nexport default function getPathMatches(_) {\n  var pathToString = getPathToString(_);\n  function pathMatches(path, paths) {\n    var pathString;\n    var pathArray;\n    if (_.isString(path)) {\n      pathString = path;\n    } else {\n      pathArray = path;\n    }\n    if (!Array.isArray(paths)) {\n      paths = [paths];\n    } else {\n      paths = _.cloneDeep(paths);\n    }\n    for (var i = 0; i < paths.length; i++) {\n      if (_.isString(paths[i])) {\n        paths[i] = _.toPath(paths[i]);\n      }\n      if (Array.isArray(paths[i])) {\n        if (pathArray === undefined) {\n          pathArray = _.toPath(pathString);\n        }\n        if (pathArray.length >= paths[i].length && _.isEqual(_.takeRight(pathArray, paths[i].length), paths[i])) {\n          // console.log('path matched');\n          return paths[i];\n        }\n      } else if (paths[i] instanceof RegExp) {\n        if (pathString === undefined) {\n          pathString = pathToString(path);\n        }\n        if (paths[i].test(pathString)) {\n          // console.log('regex matched', paths[i]);\n          return paths[i];\n        }\n      } else {\n        throw new Error('To match path use only string/regex or array of them.');\n      }\n    }\n    // console.log('matched nothing');\n    return false;\n  }\n  return pathMatches;\n}\ngetPathMatches.notChainable = true;","map":{"version":3,"names":["getPathToString","getPathMatches","_","pathToString","pathMatches","path","paths","pathString","pathArray","isString","Array","isArray","cloneDeep","i","length","toPath","undefined","isEqual","takeRight","RegExp","test","Error","notChainable"],"sources":["/Users/akwg7/Documents/react/RISE1/file-explorer-rise/frontend/node_modules/deepdash/es/getPathMatches.js"],"sourcesContent":["import getPathToString from './getPathToString.js';\n\nexport default function getPathMatches(_) {\n  var pathToString = getPathToString(_);\n  function pathMatches(path, paths) {\n    var pathString;\n    var pathArray;\n    if (_.isString(path)) {\n      pathString = path;\n    } else {\n      pathArray = path;\n    }\n    if (!Array.isArray(paths)) {\n      paths = [paths];\n    } else {\n      paths = _.cloneDeep(paths);\n    }\n    for (var i = 0; i < paths.length; i++) {\n      if (_.isString(paths[i])) {\n        paths[i] = _.toPath(paths[i]);\n      }\n      if (Array.isArray(paths[i])) {\n        if (pathArray === undefined) {\n          pathArray = _.toPath(pathString);\n        }\n        if (\n          pathArray.length >= paths[i].length &&\n          _.isEqual(_.takeRight(pathArray, paths[i].length), paths[i])\n        ) {\n          // console.log('path matched');\n          return paths[i];\n        }\n      } else if (paths[i] instanceof RegExp) {\n        if (pathString === undefined) {\n          pathString = pathToString(path);\n        }\n        if (paths[i].test(pathString)) {\n          // console.log('regex matched', paths[i]);\n          return paths[i];\n        }\n      } else {\n        throw new Error(\n          'To match path use only string/regex or array of them.'\n        );\n      }\n    }\n    // console.log('matched nothing');\n    return false;\n  }\n  return pathMatches;\n}\n\ngetPathMatches.notChainable = true;\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,sBAAsB;AAElD,eAAe,SAASC,cAAc,CAACC,CAAC,EAAE;EACxC,IAAIC,YAAY,GAAGH,eAAe,CAACE,CAAC,CAAC;EACrC,SAASE,WAAW,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChC,IAAIC,UAAU;IACd,IAAIC,SAAS;IACb,IAAIN,CAAC,CAACO,QAAQ,CAACJ,IAAI,CAAC,EAAE;MACpBE,UAAU,GAAGF,IAAI;IACnB,CAAC,MAAM;MACLG,SAAS,GAAGH,IAAI;IAClB;IACA,IAAI,CAACK,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,EAAE;MACzBA,KAAK,GAAG,CAACA,KAAK,CAAC;IACjB,CAAC,MAAM;MACLA,KAAK,GAAGJ,CAAC,CAACU,SAAS,CAACN,KAAK,CAAC;IAC5B;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIX,CAAC,CAACO,QAAQ,CAACH,KAAK,CAACO,CAAC,CAAC,CAAC,EAAE;QACxBP,KAAK,CAACO,CAAC,CAAC,GAAGX,CAAC,CAACa,MAAM,CAACT,KAAK,CAACO,CAAC,CAAC,CAAC;MAC/B;MACA,IAAIH,KAAK,CAACC,OAAO,CAACL,KAAK,CAACO,CAAC,CAAC,CAAC,EAAE;QAC3B,IAAIL,SAAS,KAAKQ,SAAS,EAAE;UAC3BR,SAAS,GAAGN,CAAC,CAACa,MAAM,CAACR,UAAU,CAAC;QAClC;QACA,IACEC,SAAS,CAACM,MAAM,IAAIR,KAAK,CAACO,CAAC,CAAC,CAACC,MAAM,IACnCZ,CAAC,CAACe,OAAO,CAACf,CAAC,CAACgB,SAAS,CAACV,SAAS,EAAEF,KAAK,CAACO,CAAC,CAAC,CAACC,MAAM,CAAC,EAAER,KAAK,CAACO,CAAC,CAAC,CAAC,EAC5D;UACA;UACA,OAAOP,KAAK,CAACO,CAAC,CAAC;QACjB;MACF,CAAC,MAAM,IAAIP,KAAK,CAACO,CAAC,CAAC,YAAYM,MAAM,EAAE;QACrC,IAAIZ,UAAU,KAAKS,SAAS,EAAE;UAC5BT,UAAU,GAAGJ,YAAY,CAACE,IAAI,CAAC;QACjC;QACA,IAAIC,KAAK,CAACO,CAAC,CAAC,CAACO,IAAI,CAACb,UAAU,CAAC,EAAE;UAC7B;UACA,OAAOD,KAAK,CAACO,CAAC,CAAC;QACjB;MACF,CAAC,MAAM;QACL,MAAM,IAAIQ,KAAK,CACb,uDAAuD,CACxD;MACH;IACF;IACA;IACA,OAAO,KAAK;EACd;EACA,OAAOjB,WAAW;AACpB;AAEAH,cAAc,CAACqB,YAAY,GAAG,IAAI"},"metadata":{},"sourceType":"module"}