{"ast":null,"code":"var _jsxFileName = \"/Users/akwg7/Documents/react/RISE1/rise-clean/frontend/src/pages/AuthenticationPages/SignUpPage/SignUpPage.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Joi from 'joi';\nimport { singupFormData } from '../../../data/userFormData';\nimport AuthenticationPage from '../CommonPage/AuthenticationPage';\nimport { useLazyRegisterUserQuery } from '../../../apiServices/authService';\nimport { login } from '../../../utils/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userSchema = {\n  username: Joi.string().required().label('Username'),\n  email: Joi.string().email({\n    tlds: {\n      allow: false\n    }\n  }).required().label('Email'),\n  password: Joi.string().required().label('Password'),\n  confirmPassword: Joi.string().required().valid(Joi.ref('password')).label('Confirm Password'),\n  role: Joi.string().required().label('Role')\n};\nconst SignUpPage = _ref => {\n  _s();\n  let {\n    isLoggedIn\n  } = _ref;\n  const [registerUser, {\n    error = {},\n    isError\n  }] = useLazyRegisterUserQuery();\n  const doSubmit = async signupForm => {\n    // post details to server\n    const {\n      data\n    } = await registerUser(signupForm);\n    if (data) {\n      login(data);\n    }\n  };\n  const onError = error => {\n    console.log(error);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthenticationPage, {\n    isLoggedIn: isLoggedIn,\n    doSubmit: doSubmit,\n    formData: singupFormData,\n    buttonLabel: \"Sign up\",\n    formLabel: \"Sign Up\",\n    redirectURL: \"/login\",\n    redirectURLLabel: \"Already have an account? Login Here\",\n    joiSchema: userSchema,\n    onError: onError,\n    errorMsg: error.data,\n    showErrorMsg: isError\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(SignUpPage, \"tSxNyWSsHDm2Ey6F5fmIfqqHB+4=\", false, function () {\n  return [useLazyRegisterUserQuery];\n});\n_c = SignUpPage;\nexport default SignUpPage;\nvar _c;\n$RefreshReg$(_c, \"SignUpPage\");","map":{"version":3,"names":["React","Joi","singupFormData","AuthenticationPage","useLazyRegisterUserQuery","login","userSchema","username","string","required","label","email","tlds","allow","password","confirmPassword","valid","ref","role","SignUpPage","isLoggedIn","registerUser","error","isError","doSubmit","signupForm","data","onError","console","log"],"sources":["/Users/akwg7/Documents/react/RISE1/rise-clean/frontend/src/pages/AuthenticationPages/SignUpPage/SignUpPage.jsx"],"sourcesContent":["import React from 'react';\nimport Joi from 'joi';\nimport { singupFormData } from '../../../data/userFormData';\n\nimport AuthenticationPage from '../CommonPage/AuthenticationPage';\nimport { useLazyRegisterUserQuery } from '../../../apiServices/authService';\nimport { login } from '../../../utils/auth';\n\nconst userSchema = {\n  username: Joi.string().required().label('Username'),\n  email: Joi.string()\n    .email({ tlds: { allow: false } })\n    .required()\n    .label('Email'),\n  password: Joi.string().required().label('Password'),\n  confirmPassword: Joi.string()\n    .required()\n    .valid(Joi.ref('password'))\n    .label('Confirm Password'),\n  role: Joi.string().required().label('Role'),\n};\n\nconst SignUpPage = ({ isLoggedIn }) => {\n  const [registerUser, { error = {}, isError }] = useLazyRegisterUserQuery();\n  const doSubmit = async (signupForm) => {\n    // post details to server\n    const { data } = await registerUser(signupForm);\n    if (data) {\n      login(data);\n    }\n  };\n\n  const onError = (error) => {\n    console.log(error);\n  };\n\n  return (\n    <AuthenticationPage\n      isLoggedIn={isLoggedIn}\n      doSubmit={doSubmit}\n      formData={singupFormData}\n      buttonLabel='Sign up'\n      formLabel='Sign Up'\n      redirectURL='/login'\n      redirectURLLabel='Already have an account? Login Here'\n      joiSchema={userSchema}\n      onError={onError}\n      errorMsg={error.data}\n      showErrorMsg={isError}\n    />\n  );\n};\n\nexport default SignUpPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,KAAK;AACrB,SAASC,cAAc,QAAQ,4BAA4B;AAE3D,OAAOC,kBAAkB,MAAM,kCAAkC;AACjE,SAASC,wBAAwB,QAAQ,kCAAkC;AAC3E,SAASC,KAAK,QAAQ,qBAAqB;AAAC;AAE5C,MAAMC,UAAU,GAAG;EACjBC,QAAQ,EAAEN,GAAG,CAACO,MAAM,EAAE,CAACC,QAAQ,EAAE,CAACC,KAAK,CAAC,UAAU,CAAC;EACnDC,KAAK,EAAEV,GAAG,CAACO,MAAM,EAAE,CAChBG,KAAK,CAAC;IAAEC,IAAI,EAAE;MAAEC,KAAK,EAAE;IAAM;EAAE,CAAC,CAAC,CACjCJ,QAAQ,EAAE,CACVC,KAAK,CAAC,OAAO,CAAC;EACjBI,QAAQ,EAAEb,GAAG,CAACO,MAAM,EAAE,CAACC,QAAQ,EAAE,CAACC,KAAK,CAAC,UAAU,CAAC;EACnDK,eAAe,EAAEd,GAAG,CAACO,MAAM,EAAE,CAC1BC,QAAQ,EAAE,CACVO,KAAK,CAACf,GAAG,CAACgB,GAAG,CAAC,UAAU,CAAC,CAAC,CAC1BP,KAAK,CAAC,kBAAkB,CAAC;EAC5BQ,IAAI,EAAEjB,GAAG,CAACO,MAAM,EAAE,CAACC,QAAQ,EAAE,CAACC,KAAK,CAAC,MAAM;AAC5C,CAAC;AAED,MAAMS,UAAU,GAAG,QAAoB;EAAA;EAAA,IAAnB;IAAEC;EAAW,CAAC;EAChC,MAAM,CAACC,YAAY,EAAE;IAAEC,KAAK,GAAG,CAAC,CAAC;IAAEC;EAAQ,CAAC,CAAC,GAAGnB,wBAAwB,EAAE;EAC1E,MAAMoB,QAAQ,GAAG,MAAOC,UAAU,IAAK;IACrC;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAML,YAAY,CAACI,UAAU,CAAC;IAC/C,IAAIC,IAAI,EAAE;MACRrB,KAAK,CAACqB,IAAI,CAAC;IACb;EACF,CAAC;EAED,MAAMC,OAAO,GAAIL,KAAK,IAAK;IACzBM,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;EACpB,CAAC;EAED,oBACE,QAAC,kBAAkB;IACjB,UAAU,EAAEF,UAAW;IACvB,QAAQ,EAAEI,QAAS;IACnB,QAAQ,EAAEtB,cAAe;IACzB,WAAW,EAAC,SAAS;IACrB,SAAS,EAAC,SAAS;IACnB,WAAW,EAAC,QAAQ;IACpB,gBAAgB,EAAC,qCAAqC;IACtD,SAAS,EAAEI,UAAW;IACtB,OAAO,EAAEqB,OAAQ;IACjB,QAAQ,EAAEL,KAAK,CAACI,IAAK;IACrB,YAAY,EAAEH;EAAQ;IAAA;IAAA;IAAA;EAAA,QACtB;AAEN,CAAC;AAAC,GA7BIJ,UAAU;EAAA,QACkCf,wBAAwB;AAAA;AAAA,KADpEe,UAAU;AA+BhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module"}